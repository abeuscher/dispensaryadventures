-
    var products = [];
    for (i=0;i<locals.length;i++) {
        products.push(processProduct(locals[i]));
    }
    function processProduct(p) {

        return [{
            "label":"Manufacturer",
            "type":"alpha",
            "value":p.info.brand,
            "link":p.url,
            "mobile":true
        },{
            "label":"Strain",
            "type":"alpha",
            "value":p.info.strain,
            "link":p.url,
            "mobile":true
        },{
            "label":"Dispensary",
            "type":"alpha",
            "value":p.info.dispensary,
            "mobile":false            
        },{
            "label":"THC %",
            "type":"number",
            "value":parseFloat(p.info.listed_thc_percentage.replace("%","")) + "%",
            "mobile":true 
        },{
            "label":"Amount Purchased",
            "type":"number",
            "value":p.info.weight,
            "mobile":false           
        },{
            "label":"$/Gram",
            "type":"number",
            "value":"$" + parseFloat(p.info.cost / p.info.weight).toFixed(2),
            "mobile":true          
        },{
            "label":"Pack. Date",
            "type":"date",
            "value":p.info.package_date,
            "mobile":false           
        },{
            "label":"Purch. Date",
            "type":"date",
            "value":p.info.purchase_date,
            "mobile":false,
            "default":true           
        },{
            "label":"Taste",
            "type":"number",
            "value":p.scores.taste,
            "mobile":false,
            "score":true            
        },{
            "label":"Look",
            "type":"number",
            "value":p.scores.quality,
            "mobile":false,
            "score":true               
        },{
            "label":"Strength",
            "type":"number",
            "value":p.scores.strength,
            "mobile":false,
            "score":true               
        },{
            "label":"Overall",
            "type":"number",
            "value":parseInt(p.scores.taste) + parseInt(p.scores.quality) + parseInt(p.scores.strength),
            "mobile":true,
            "score":true            
        }]

    }
.grid-table.sortable
    .table-controls
        .inner
            - let categories=Object.keys(products[0]).map(category=>{return products[0][category].label})
            label(for="category-sort") Sort By:
            select.category-sort
                for option,idx in products[0]
                    option(value=JSON.stringify(option),selected=option.default,data-idx=idx)=option.label      
            select.sort-direction
                option(selected,value="true") asc
                option(value="false") desc     
    .table-header
        .table-header-row.table-row.header-header
            .table-header-cell.table-cell.source-header(colspan="3")
                p Source
            .table-header-cell.table-cell.details-header(colspan="5")
                p Deets
            .table-header-cell.table-cell.score-header(colspan="4")
                p Scores
        .table-header-row.table-row
            each header in products[0]
                .table-header-cell.table-cell(class=(header.mobile ? header.type : header.type + " hide-mobile")+(header.score ? " score" : ""))
                    p!=header.label
    .table-body
        each product in products
            .table-body-row.table-row
                each item in product
                    .table-body-cell.table-cell(class=(item.mobile ? item.type : item.type + " hide-mobile")+(item.score ? " score" : ""))
                        if (item.link)
                            a(href=item.link)
                                p(class=item.label.toLowerCase().replace(/\W/g, ''))!=item.value
                        else
                            p(class=item.label.toLowerCase().replace(/\W/g, ''))!=item.value